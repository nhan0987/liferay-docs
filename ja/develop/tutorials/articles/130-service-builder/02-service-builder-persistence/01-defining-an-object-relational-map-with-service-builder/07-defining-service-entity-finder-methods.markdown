---
header-id: defining-service-entity-finder-methods
---

# サービスエンティティファインダーメソッドの定義

<p class="alert alert-info"><span class="wysiwyg-color-blue120">ご覧のページは、お客様の利便性のために一部機械翻訳されています。また、ドキュメントは頻繁に更新が加えられており、翻訳は未完成の部分が含まれることをご了承ください。最新情報は都度公開されておりますため、必ず英語版をご参照ください。翻訳に問題がある場合は、<a href="mailto:support-content-jp@liferay.com">こちら</a>までご連絡ください。</span></p>

[TOC levels=1-4]

Finderメソッドは、指定されたパラメーターに基づいてデータベースからエンティティオブジェクトを取得します。 おそらく、サービスで作成するエンティティごとに少なくとも1つのファインダーメソッドを作成する必要があります。 Service Builderは、エンティティに対して作成した各ファインダーに基づいていくつかのメソッドを生成します。 ファインダのパラメータに基づいてエンティティインスタンスを取得、検索、削除、およびカウントするメソッドを作成します。

多くのアプリケーションでは、サイトごとにエンティティを見つけることができることが重要です。 `service.xml` ファイルに対してLiferay @ide@の概要モードを使用して、これらのファインダーを指定できます。

## ファインダーを作成する

ファインダーノードを作成する手順は次のとおりです。

1.  画面の左側にあるアウトラインのエンティティノードの下にある *ファインダー* ノードを選択します。 IDEは、ビューのメイン部分に空の *ファインダー* テーブルを表示します。

2.  表の右側にある *Add* アイコン（![Add](../../../../images/icon-add-ide.png)）をクリックして、新しいファインダーを作成します。

3.  ファインダーの名前と戻り値のタイプを指定します。 ファインダの名前はService Builderが作成するメソッドの名前に使用されるため、ファインダの名前付けにはJavaキャメルケースの命名規則を使用します。

IDEは、アウトラインの *ファインダー* ノードの下に新しいファインダーサブノードを作成します。 次に、このノードのファインダー列を指定する方法を学びます。

## ファインダー列の作成

新しいfinderノードの下に、@ide@は *Finder Columns* ノードを作成しました。 ファインダー列を作成する手順は次のとおりです。

1.  *Finder Columns* ノードを選択して、ファインダーのパラメーターの列を指定します。

2.  *Add* アイコンをクリックし、列の名前を指定して、新しいファインダー列を作成します。 複数のファインダーパラメーター（列）を指定できることに注意してください。

3.  `service.xml` ファイルを保存します。

| **重要**：エンティティのプライマリキーをパラメーターとして使用するファインダーを作成しないでください。 | Service Builderは自動的に生成するため、これらは不要です| `findByPrimaryKey` および `fetchByPrimaryKey` すべてのエンティティ主キーのメソッド。 | `* service` モジュールをデプロイすると、Service Builderはすべてのエンティティのインデックスを作成します|主キー列とファインダー列。 エンティティプライマリを使用するファインダーの追加|キーは、同じために複数のインデックスを作成しようとします|列---たとえば、Oracle DBはこれらの試行をエラーとして報告します。

![図1：Liferay @ide@を使用すると、Finderエンティティを簡単に作成できます。](../../../../images/service-builder-finders.png)

サイトスコープエンティティ（データが各サイトに一意であるエンティティ）を作成している場合は、上記の手順に従って、エンティティを取得するために `groupId` でファインダーを作成します。

サービスビルダ（たとえば、ファインダ関連する方法を生成する `fetchByGroupId`、 `findByGroupId`、 `removeByGroupId`、 `countByGroupId`あなたのエンティティのために） `*永続` 及び `* PersistenceImpl` クラス。 これらのクラスの最初はインターフェースです。 2番目はその実装です。 たとえば、Liferayのブックマークアプリケーションは、 `/ bookmarks-api / src / main / java / com / liferay / bookmarks / service / persistence` フォルダーと `-PersistenceImpl` にある `-Persistence` クラスでエンティティファインダーメソッドを生成します。 `/ bookmarks-service / src / main / java / com / liferay / bookmarks / service / persistence / impl` フォルダー内のクラス。

これで、Service Builderを構成して、エンティティの検索メソッドを作成することがわかりました。 すごい！

プロジェクトのサービスを指定したので、Service Builderを実行してサービスを *ビルド* する準備ができました。 [でService Builderを実行し、生成するコードを調べます](/docs/7-1/tutorials/-/knowledge_base/t/running-service-builder)。
