---
header-id: defining-service-entities
---

# サービスエンティティの定義

<p class="alert alert-info"><span class="wysiwyg-color-blue120">ご覧のページは、お客様の利便性のために一部機械翻訳されています。また、ドキュメントは頻繁に更新が加えられており、翻訳は未完成の部分が含まれることをご了承ください。最新情報は都度公開されておりますため、必ず英語版をご参照ください。翻訳に問題がある場合は、<a href="mailto:support-content-jp@liferay.com">こちら</a>までご連絡ください。</span></p>

[TOC levels=1-4]

エンティティはサービスの心と魂です。 これらは、Javaのモデルオブジェクトとデータベースフィールドおよびテーブル間のマップを表します。 Service Builderは、定義したエンティティを自動的にマッピングし、Javaオブジェクトを取得して永続化する機能を提供します。 ブックマークアプリケーションの場合、2つのエンティティが [service.xml](https://github.com/liferay/liferay-portal/blob/master/modules/apps/bookmarks/bookmarks-service/service.xml) に従って作成されます。1つはブックマークエントリ用、もう1つはブックマークフォルダ用です。

`BookmarksEntry` エンティティ情報の概要は次のとおりです。

  - **名前：** *BookmarksEntry*
  - **ローカルサービス：** *はい*
  - **リモートサービス：** *はい*

そして、これが `BookmarksFolder` エンティティに使用されるものです。

  - **名前：** *BookmarksFolder*
  - **ローカルサービス：** *はい*
  - **リモートサービス：** *はい*

Liferay @ide@を使用してエンティティを作成する手順は次のとおりです。

1.  概要モードの `service.xml` エディターの左側のアウトラインで、Service Builderノードの下の *エンティティ* ノードを選択します。 ビューの主要部分で、エンティティテーブルが空であることに注意してください。

2.  表の右側にある *エンティティ* 追加アイコン（![Add](../../../../images/icon-add-ide.png)）をクリックして、エンティティを作成します。

3.  エンティティに名前を付け、ローカルおよびリモートサービスを生成するかどうかをマークします。

必要な数のエンティティを追加します。

![図1：Liferay @ide@の* Overview *モードを使用すると、 <code>service.xml</code> ファイルにサービスエンティティを簡単に追加できます。](../../../../images/service-add-entity.png)

エンティティのデータベーステーブル名には、名前空間のプレフィックスが付いたエンティティ名が含まれます。 ブックマークの例では、 `Bookmarks_BookmarksEntry` という名前の1つのデータベーステーブルと、 `Bookmarks_BookmarksFolder`という名前の別のデータベーステーブルが作成されます。

*Local Service* （ `local-service` 属性）を `true` すると、Service Builderはエンティティのサービスのローカルインターフェイスを生成します。 ローカルサービスは、デフォルトで `false` に設定されています。 ローカルサービスは、デプロイ先のLiferayサーバーからのみ呼び出すことができます。

*リモートサービス* （ `リモートサービス` 属性）を `true` すると、Service Builderはサービスのリモートインターフェイスを生成します。 ローカルサービスは、デフォルトで `true` に設定されています。 リモートサービスを生成せずに、完全に機能するアプリケーションを構築できます。 その場合、エンティティローカルサービスを `true` 、リモートサービスを `false`設定できます。 ただし、アプリケーションのサービスへのリモートアクセスを有効にする場合は、ローカルサービスとリモートサービスの両方を `true`ます。

| **ヒント：** |の既存のデータアクセスオブジェクト（DAO）サービスがあるとします。 JPAなどの他のフレームワークを使用して構築されたエンティティ。 ローカルサービスを設定できます| `false` およびリモートサービスに `true` `-Impl` クラスは、既存のDAOのメソッドを呼び出すことができます。 これにより| Liferayの許可チェックシステムと統合し、提供するエンティティ| Service Builderによって生成されたWebサービスAPIへのアクセス。 これは非常に| Liferayの便利で非常に強力な、よく使用される機能。

アプリケーションのエンティティを作成する方法を確認したので、エンティティ *列*を使用して属性を記述する方法を学習します。
