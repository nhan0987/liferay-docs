---
header-id: writing-your-first-liferay-application
---

# 初めての@product@アプリケーションの作成

<p class="alert alert-info"><span class="wysiwyg-color-blue120">ご覧のページは、お客様の利便性のために一部機械翻訳されています。また、ドキュメントは頻繁に更新が加えられており、翻訳は未完成の部分が含まれることをご了承ください。最新情報は都度公開されておりますため、必ず英語版をご参照ください。翻訳に問題がある場合は、<a href="mailto:support-content-jp@liferay.com">こちら</a>までご連絡ください。</span></p>

[TOC levels=1-4]

<div class="learn-path-step row">
    <p id="stepTitle">初めてのポートレット開発</p><p>手順1/8</p>
</div>

それでは、プロジェクトを作成し、アプリケーションを@<product@>にデプロイする方法を段階的に学んでいきます。 まずはアプリケーションを@product@に付属するアプリケーションと一緒にデプロイします。

最初のアプリケーションはシンプルです。次のようなゲストブックアプリケーションを作成します。

![図1：このシンプルなアプリケーションを作成します。](../../../images/first-guestbook-portlet.png)

デフォルトでは、ユーザーがウェブサイトに残すゲストブックメッセージが表示されます。 メッセージを追加するには、*Add Entry*ボタンをクリックして、メッセージを入力および保存するためのフォームを表示します。

これで最初の@product@アプリケーションを作成する準備ができました。

## 最初の@product@アプリケーションを作成する

最初のステップは、*Liferay Module Project*を作成することです。 モジュールは、@product@アプリケーションのコアビルディングブロックです。 各アプリケーションは、1つ、またはそれ以上のモジュールから作られます。 各モジュールは、アプリケーションの機能部分をカプセル化します。 複数のモジュールが完全なアプリケーションを形成します。

これらのモジュールは[OSGi](https://www.osgi.org/)モジュールです。 @product@のOSGiコンテナーは、任意のOSGiモジュールを実行できます。 各モジュールは、マニフェストファイルを含むJARファイルとしてパッケージ化されます。 マニフェストは、OSGiコンテナがモジュールを認識するために必要です。 技術的には、マニフェストのみを含むモジュールも有効です。 もちろん、そのようなモジュールは面白みに欠けるでしょう。

次に、最初のモジュールを作成します。 このラーニングパスでは、Liferay Workspace内にモジュールを作成することを目的とします。 最初のLiferayモジュールプロジェクトを作成するには、以下の手順に従います。

1.  Liferay @ide@のプロジェクトエクスプローラーで、Liferay Workspaceを右クリックし、*New* → *Liferay Module Project*と選択します。

2.  次の情報を含むウィザードの最初の画面を完了します。

      - プロジェクト名に`guestbook-web`と入力します。
      - *Gradle*ビルドタイプを使用します。
      - プロジェクトテンプレート用に`mvc-portlet`を選択します。

    *Next*をクリックします。

3.  ウィザードの2番目の画面で、コンポーネントクラス名に`Guestbook`、パッケージ名に `com.liferay.docs.guestbook.portlet`を入力します。 *Finish*をクリックします。

Gradleはプロジェクトの作成中にプロジェクトの依存関係をダウンロードするため、@ide@がプロジェクトを作成するのに時間がかかる場合があります。 これが完了すると、`guestbook-web`というモジュールプロジェクトが作成されます。 `mvc-portlet`テンプレートは、適切な依存関係を使用してプロジェクトを設定し、開始に必要なすべてのファイルを生成しました。

  - ポートレットのクラス名（指定したパッケージ内）
  - JSPファイル（`/src/main/resources`内）
  - 言語プロパティ（同様に`/src/main/resources`内）

![図2：Liferay Workspaceの<code>modules</code>フォルダに新しいモジュールプロジェクトが表示されます。](../../../images/guestbook-web-project.png)

新しいモジュールプロジェクトは*ポートレット*アプリケーションです。 次に、ポートレットが何であるかについてを学習します。

## ポートレットとは

Webアプリケーションはシンプルにすることができます。記事などの1つの情報が表示される場合があります。 複雑なアプリケーションは、多くのデータをアプリケーションに入力する際に、データが借りているのか払い戻しが必要なのかを計算し、関連税金を追跡することがあります。 これらのアプリケーションは*platform*で実行され、アプリケーション開発者がアプリケーションの作成に必要な構成要素を提供します。

![図3: 多くのLiferayアプリケーションは、同一ページ内で同時に実行できます。](../../../images/portlet-applications.png)

@product@は、ユーザー管理、セキュリティ、ユーザーインターフェイス、サービスなど、今日のアプリケーションに必要な共通機能を含むプラットフォームを提供します。 ポートレットは、基本的な構成要素の1つです。 また、多くの場合、Webアプリケーションはページ全体を占めることもあります。 必要に応じて、@product@のアプリケーションでもこれを行うことができます。 ただし、ポートレットを使用すると、同じページで多くのアプリケーションを同時に提供できます。 @product@のフレームワークでは、すべてのステップでこれが考慮されます。 たとえば、同じページで複数のアプリケーションを提供する、Liferayの機能をサポートするプラットフォーム生成URLなどの機能があります。

## コンポーネントとは

Liferayモジュールプロジェクトで作成されたポートレットは、*Components*として生成されます。 モジュール（ *バンドル*とも呼ばれる）がアプリケーションの一部をカプセル化する場合、コンポーネントはコア機能を含むオブジェクトです。 コンポーネントは、コンポーネントフレームワークまたはコンテナによって管理されます。 コンポーネントはモジュール内にデプロイされ、コンテナの必要に応じて作成、開始、停止、そして破棄されます。 これはWebアプリケーションにとって最適なモデルです。\! 必要な場合にのみ使用可能にすることができ、使用しない場合、コンテナは他のコンポーネントが必要とするリソースを使用しないようにすることができます。

この場合、宣言型本サービス（DS）コンポーネントを作成します。 宣言型本サービスでは、オブジェクトがコンポーネントであることを宣言し、コンテナがその管理方法を把握できるようにコンポーネントに関するデータを定義します。 デフォルト設定が作成されました。これについては後で詳しく見ていきます。

## アプリケーションのデプロイ

行ったのは生成することだけでしたが、`guestbook-web`プロジェクトは、構築してデプロイする準備ができました。

1.  サーバーが実行されていることを確認し、実行されていない場合は@ide@のServersペインで選択し、開始ボタン（![Start Server](../../../images/icon-start-server.png)）をクリックします。

2.  起動したら、`guestbook-web`プロジェクトをプロジェクトエクスプローラーからサーバーにドラッグアンドドロップします。

    ![図4：モジュールをドラッグアンドドロップします。](../../../images/deploy-module.gif)

3.  ブラウザーを開き、@product@（デフォルトでは<http://localhost:8080>）へ移ります。

    @product@を初めて起動する場合は、短いウィザードを使用してサーバーをセットアップします。 ウィザードでは、デフォルトのデータベース（Hypersonic）を使用してください。 このデータベースは本番での使用を意図したものではありませんが、開発およびテストには適しています。

4.  ページにアプリケーションを追加するには、右上隅にある*Add* (![Add Widget](../../../images/icon-add-app.png)) をクリックします。

5.  *Widgets*を選択します。 アプリケーションリストで、作成したアプリケーションがサンプルカテゴリに表示されます。 その名前は`Guestbook`です。

![図5：これはデフォルトのLiferayホームページです。 Hello Worldウィジェットと、作成したゲストブックアプリケーションの初期バージョンが含まれています。](../../../images/default-portlet-application.png)

これで、ゲストブックポートレットの開発に着手する準備が整いました。
